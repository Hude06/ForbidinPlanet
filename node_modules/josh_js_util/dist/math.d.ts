export declare function rand(min: number, max: number): number;
export declare function lerp_number(t: number, s: number, e: number): number;
export declare function range(count: number): number[];
export declare class Point {
    y: number;
    x: number;
    constructor(x: number, y: number);
    add(pt: Point): Point;
    subtract(pt: Point): Point;
    multiply(point: Point): Point;
    magnitude(): number;
    scale(scale: number): Point;
    toString(): string;
    floor(): Point;
    clamp(min: Point, max: Point): Point;
    clone(): Point;
    toJSON(): {
        x: number;
        y: number;
    };
    static fromJSON(point: {
        x: number;
        y: number;
    }): Point;
    lerp(t: number, that: Point): Point;
}
export declare class Size {
    w: number;
    h: number;
    constructor(w: number, h: number);
    set(w: number, h: number): void;
    scale(scale: number): Size;
    asPoint(): Point;
}
export declare class Insets {
    top: number;
    right: number;
    bottom: number;
    left: number;
    constructor(top: any, right: any, bottom: any, left: any);
}
export declare class Bounds {
    x: number;
    y: number;
    w: number;
    h: number;
    constructor(x: number, y: number, w: number, h: number);
    get x2(): number;
    get y2(): number;
    contains(pt: Point): boolean;
    set(number: number, number2: number, number3: number, h: number): void;
    add_self(point: Point): void;
    add(point: Point): Bounds;
    bottom(): number;
    left(): number;
    right(): number;
    top(): number;
    center(): Point;
    intersects(other: Bounds): boolean;
    toString(): string;
    top_right(): Point;
    bottom_right(): Point;
    bottom_left(): Point;
    top_left(): Point;
    copy(): Bounds;
    sides(): Insets;
}
